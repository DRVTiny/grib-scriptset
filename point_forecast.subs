sub dbgShowHsh {
 my ($H,$L,$K)=@_;
 if ($K ne undef) {
  print 'TSH;'.join(';',@{$K})."\n".$_.';'.join(';',@{$H->{$_}}{@{$K}})."\n" foreach @{$L};
 } else {
  foreach my $lbl ( @{$L} ) {
   my @t=sort { $a<=>$b } keys %{$H->{$lbl}};
   print 'TSH;'.join(';',@t)."\n".$lbl.';'.join(';',@{$H->{$lbl}}{@t})."\n";
  }
 }
}

sub getFactPreDelta {
 my ($mp,$factV,$predV)=@_;
 return(9999999) unless ( ($factV ne undef) and ($predV ne undef) );
 my $d=$predV-$factV;
 if ($mp=~m/^(?:WINDD|APCP)/) {
  $d=abs($d);
  return nearest(0.01,($d>180?360-$d:$d)) if ($mp eq 'WINDD');
 }
 return nearest(0.01,$d);
}

sub cnvFactT {
 my $T=shift;
 return defined($T)?$T+ZEROC:undef;
}

sub cnvFactPres {
 my $P=shift;
 return defined($P)?$P*100:undef;
}

sub tsh2date {
 my $tsh=shift;
 my @t=@{[localtime($tsh*3600)]}[5,4,3,2];
 $t[0]+=1900; $t[1]++;
 return ( map { sprintf('%02g',$_) } @t );
}

sub fmbh2date {
 my ($Year,$Month,$fmbh)=@_;
 return ( map { sprintf('%02g',$_) } (Add_Delta_Days($Year,$Month,1,int($fmbh/24)),$fmbh%24) );
}

sub BASHArr2List { 
 my $ArrDef=shift; chomp $ArrDef;
 my ($ArrName)=($ArrDef=~m/^declare -a ([^=]+)=/);
 $ArrDef=~s%(?:^declare -a ${ArrName}='\(|\)'$)%%g;
 $ArrDef=~s%(\[[0-9]+\]="[^"]+")\s*%\$${ArrName}$1;\n%g;
 chomp $ArrDef;
 return ($ArrName,$ArrDef);
}

sub approx2grid {
  my ($pLat,$pLon,$GridStepLat,$GridStepLon)=@_;
  my $lonLeft=int($pLon/$GridStepLon)*$GridStepLon;
  my $lonRight=$lonLeft+$GridStepLon;
  my $latDown=int($pLat/$GridStepLat)*$GridStepLat;
  my $latUp=$latDown+$GridStepLat;
#  cell[] indexes (clockwise from up left point to down left one):
#    0 --- 1
#    |     |
#    |     |
#    3 --- 2
  return ( {lat=>$latUp,lon=>$lonLeft},
           {lat=>$latUp,lon=>$lonRight},
           {lat=>$latDown,lon=>$lonRight},
           {lat=>$latDown,lon=>$lonLeft}
         );
}

sub Add_APCP12_To_Pred {
 my ($fact,$pred)=@_;
 my @tshPred=sort { $a <=>$b } keys %{$pred->{'APCP'}};
 my ($tshMin,$tshMax,$stepH)=($tshPred[0],$tshPred[-1],$tshPred[1]-$tshPred[0]);
 my @tsh12s=grep { $fact->{'APCP12'}{$_} ne undef } @tshPred;
 my $tshPtr=$tshMin-$stepH;

 print "tsh12s;".join(';',@tsh12s)."\n";
 print 'APCP12;'.join(';',map { $fact->{'APCP12'}{$_} } @tsh12s)."\n";
 print "stepH=$stepH\n";
# exit(0);

 foreach my $tsh12 ( @tsh12s ) {
  my $precp=0;
  for (my $tsh=$tshPtr+$stepH; $tsh<=$tsh12; $tsh+=$stepH) {
   $precp+=$pred->{'APCP'}{$tsh};
  }
  $pred->{'APCP12'}{$tsh12}=nearest(0.01,$precp);
  $tshPtr=$tsh12;
 }
 return 1;
}

sub outPred {
 my ($pred,$lbls,$tshBaseDay,$predDir,$geo,$vs)=@_;
 my @mpids=@{$lbls};
 my @tsh=sort { $a<=>$b } keys %{$pred->{'PRES'}};
 my $mode='V';
 print "tshBaseDay=${tshBaseDay}:::".join( ';',@{[tsh2date($tshBaseDay)]}[0,1,2] ).":::\n";

 if ($vs) {
  $mode=uc(substr($vs->{'Mode'},0,1)) if $vs->{'Mode'};
  my $rx=$vs->{'rxExcl'};
  @mpids=grep(!/${rx}/,@mpids) if $rx;
 }
 my @mem;
 if ($mode eq 'V') {
  $mem[0]=['PREDH',@mpids];
  foreach my $tsh (@tsh) {
   push @mem, [($tsh-$tshBaseDay), map { nearest(0.01,$pred->{$_}{$tsh}) } @mpids];
  }
 } elsif ($mode eq 'H') {
  $mem[0]=['METEOPAR',map { $_-$tshBaseDay } @tsh];
  foreach my $mp (@mpids) {
   push @mem, [$mp,map { nearest(0.01,$pred->{$mp}{$_}) } @tsh];
  }
 }
 my $Day=join( '',@{[tsh2date($tshBaseDay)]}[0,1,2] );
 my $predFile="${predDir}/${Day}_".$geo->{'Lat'}.','.$geo->{'Lon'}."_${mode}";
#=<XLS>
 my $wb = Spreadsheet::WriteExcel->new($predFile.'.xls');
 my $sh = $wb->add_worksheet($Day);
 my $row=0;
 foreach (@mem) {
  my $col=0;
  $sh->write($row,$col++,$_) foreach @{$_};
  $row++;
 }
 $wb->close();
#=</XLS>
#=<CSV>
 print "mpids: ".join(';',@mpids)."\ntsh: ".join(';',@tsh)."\n";
 print "predFile=$predFile\n";
 open(PRED,'>',$predFile.'.csv');
 print PRED join("\n", map { join(';',@{$_}).';' } @mem);
 close(PRED);
#=</CSV>
 @mem=();
 return 1;
}

return 1;